public void SetTextOnEdit(By objElementName, String strValue) throws Throwable
	{
		Boolean boolSetTextOnEdit=false;	
		int attempt = 0;
		while(attempt < 3)
		{
			try
			{
				if(getDriver().findElements(objElementName).size()!=0 && StringUtil.isNotBlank(strValue))
				{
					String strName = getDriver().findElement(objElementName).getAttribute("name");
					getDriver().findElement(objElementName).sendKeys(strValue);
					boolSetTextOnEdit=true;
					System.out.println("Set text on webelement : " + strName + " Value :" + strValue );
					break;
				}
			}catch(Exception e){				
			}
			attempt++;
		}
		
		if(boolSetTextOnEdit==false)
		{
			System.out.println("Webelement with name  : '" + getDriver().findElement(objElementName).getAttribute("name") + "' was found");
		}
		
	}

public void SelectItemFromWebList(By objElementName, String strValue) throws InterruptedException, NoSuchElementException
	{
		Boolean boolSelectItemFromWebList=false;
		try
		{
			if(getDriver().findElements(objElementName).size()!=0 && StringUtil.isNotBlank(strValue))
			{
				Select itemstoSelect =new Select(getDriver().findElement(objElementName));
				System.out.println("inside SelectItemFromWebList ");
				String strName = getDriver().findElement(objElementName).getAttribute("name");
				itemstoSelect.selectByVisibleText(strValue);			
				boolSelectItemFromWebList = true;
				System.out.println("Selected item in webelement : " + strName + " Value :" + strValue );
			}
		}catch(Exception e){
			System.out.println(e.getMessage());
			try{
			if(getDriver().findElements(objElementName).size()!=0 && StringUtil.isNotBlank(strValue))
			{
				Select itemstoSelect =new Select(getDriver().findElement(objElementName));
				String strName = getDriver().findElement(objElementName).getAttribute("name");
				List<WebElement> allOptions = itemstoSelect.getOptions();
				for(WebElement i:allOptions){
					//System.out.println(i.getText());
					if(i.getText().equalsIgnoreCase(strValue)){
						String tvalue = i.getText();
						itemstoSelect.selectByVisibleText(tvalue);
						boolSelectItemFromWebList = true;
						System.out.println("Selected item in webelement : " + strName + " Value :" + strValue );
						break;
					}
				}				
			}
			}catch(Exception s){
			}
		}
		
		if(boolSelectItemFromWebList==false)
		{
			System.out.println("Webelement with name  : '" + getDriver().findElement(objElementName).getAttribute("name") + "' was not found");
		}
	}

public void ReadProp() throws IOException
	{
		FileInputStream f1= new FileInputStream(System.getProperty("user.dir") + "\\Resource\\RxNovaSettings.properties");
		System.out.println(System.getProperty("user.dir") + "\\Resource\\RxNovaSettings.properties");
		pf.load(f1);		
	}	

public void ClickOnImage(By objElementName) throws InterruptedException
	{
		Boolean boolClickOnImage = false;
		
		int attempts = 0;
		while(attempts < 3)
		{
			try
			{
				if(getDriver().findElements(objElementName).size()!=0)
				{
					String strName =getDriver().findElement(objElementName).getAttribute("name");
					getDriver().findElement(objElementName).click();
					Thread.sleep(2000);
					boolClickOnImage = true;
					System.out.println("Clicked on Image : " + strName);
					break;
				}				
			}
			catch(StaleElementReferenceException e){				
			}
			attempts++;			
		}
		
		
		
		if(boolClickOnImage==false)
		{
			System.out.println("Webelement with name  : '" + getDriver().findElement(objElementName).getAttribute("name") + "' was not found");
		}
	}

    public static void deleteFolder(File folder) {
	    File[] files = folder.listFiles();
	    if(files!=null) { //some JVMs return null for empty dirs
	        for(File f: files) {
	            if(f.isDirectory()) {
	                deleteFolder(f);
	            } else {	            	
	                f.delete();
	            }
	        }
	    }
	    folder.delete();	    
	}

    public static String ReadFolder(File folder) {
	    File[] files = folder.listFiles();
	    if(files!=null) { //some JVMs return null for empty dirs
	        for(File f: files) {
	        	 System.out.println(f.getName());
	        	 System.out.println(f.getPath());
	        	// System.out.println(f.getPath() + "\\" + f.getName());
	        	 return f.getPath();
	        }
	    }
		return null;
	}

	// Commonly used to copy files between locations
    private static void copyFileUsingApacheCommonsIO(File source, File dest) throws IOException {
	    FileUtils.copyFile(source, dest);
	}

    	// Read all the content of text file - Used with BSC DRUGList Reporting Project
	public Scanner readTextContent(String strFilePath) throws FileNotFoundException {
		File myFile = new File(strFilePath);
		Scanner sc = new Scanner(myFile);		
		sc.useDelimiter("\\Z");		
	//	System.out.println(sc.next());
		return sc;
	}

    public void deleteFile(String fileToDelete) {
		String thisfileToDelete= fileToDelete.replace(" ", "_");
		File file = new File(thisfileToDelete);
		if(file.delete()) 
        { 
            System.out.println("File deleted successfully at location - " + thisfileToDelete); 
        } 
        else
        { 
            System.out.println("Failed to delete the file at location - " + thisfileToDelete + "File may not exists for deletion "); 
        } 
		
	}



    




	
